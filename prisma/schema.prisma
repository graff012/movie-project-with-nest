generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  superadmin
}

enum Status {
  active
  expired
  canceled
  pending_payment
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentMethod {
  card
  paypal
  bankTransfer
  crypto
}

enum SubscriptionType {
  free
  premium
}

enum Quality {
  P480p  @map("480p")
  P720p  @map("720p")
  P1080p @map("1080p")
}

model User {
  id               String             @id @default(uuid())
  username         String             @unique @db.VarChar(150)
  fullname         String             @db.VarChar(250)
  password         String             @db.VarChar(150)
  email            String             @unique @db.VarChar(150)
  phoneNumber      String?            @unique @map("phone_number") @db.VarChar(150)
  role             Role               @default(user)
  avatarUrl        String?            @map("avatar_url")
  country          String?            @db.VarChar(150)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  userSubscription UserSubscription[]
  movies           Movie[]
  favorites        Favorite[]
  Review           Review[]
  watchHistory     WatchHistory[]

  @@map("users")
}

model SubscriptionPlan {
  id               String             @id @default(uuid())
  name             String             @db.VarChar(150)
  price            Float
  durationDays     Int                @map("duration_days")
  features         Json
  isActive         Boolean            @default(true) @map("is_active")
  userSubscription UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id        String           @id @default(uuid())
  plan_id   String           @db.VarChar(150)
  user_id   String           @db.VarChar(150)
  plan      SubscriptionPlan @relation(fields: [plan_id], references: [id])
  user      User             @relation(fields: [user_id], references: [id])
  startDate DateTime         @default(now()) @map("start_date")
  endDate   DateTime         @map("end_date")
  status    Status           @default(pending_payment)
  autoRenew Boolean          @default(false) @map("auto_renew")
  createdAt DateTime         @default(now())
  payments  Payment[]

  @@map("user_subscription")
}

model Payment {
  id                    String           @id @default(uuid())
  userSubscriptionId    String           @db.VarChar(200)
  userSubscription      UserSubscription @relation(fields: [userSubscriptionId], references: [id])
  amount                Float
  paymentMethod         PaymentMethod    @map("payment_method")
  paymentDetails        Json
  status                PaymentStatus
  externalTransactionId String           @map("external_transaction_id") @db.VarChar(100)
  createdAt             DateTime         @default(now())

  @@map("payments")
}

model Category {
  id              String          @id @default(uuid())
  name            String          @db.VarChar(130)
  slug            String          @unique @db.VarChar(130)
  description     String
  movieCategories MovieCategory[]

  @@map("categories")
}

model Movie {
  id               String           @id @default(uuid())
  title            String           @db.VarChar(130)
  slug             String           @db.VarChar(120)
  description      String
  releaseYear      Int              @map("release_year")
  durationMinutes  Int              @map("duration_minutes")
  posterUrl        String           @map("poster_url")
  rating           Float
  subscriptionType SubscriptionType @default(free) @map("subscription_type")
  viewCount        Int              @default(0) @map("view_count")
  createdById      String
  createdBy        User             @relation(fields: [createdById], references: [id])
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  movieCategories  MovieCategory[]
  movieFiles       MovieFiles[]
  favorites        Favorite[]
  Review           Review[]
  watchHistory     WatchHistory[]

  @@map("movies")
}

model MovieCategory {
  id         String   @id @default(uuid())
  movieId    String
  categoryId String
  movies     Movie    @relation(fields: [movieId], references: [id])
  categories Category @relation(fields: [categoryId], references: [id])

  @@map("movie_category")
}

model MovieFiles {
  id       String  @id @default(uuid())
  movieId  String  @map("movie_id")
  movies   Movie   @relation(fields: [movieId], references: [id])
  fileUrl  String  @map("file_url")
  quality  Quality
  language String  @default("uz") @db.VarChar(100)

  @@map("movie_files")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")
  users     User     @relation(fields: [userId], references: [id])
  movies    Movie    @relation(fields: [movieId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

model WatchHistory {
  id                String   @id @default(uuid())
  userId            String
  movieId           String
  users             User     @relation(fields: [userId], references: [id])
  movies            Movie    @relation(fields: [movieId], references: [id])
  watchedDuration   Int      @map("watched_duration")
  watchedPercentage Float    @map("watched_percentage")
  lastWatched       DateTime @default(now()) @map("last_watched")

  @@map("watch_history")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  movieId   String   @map("movie_id")
  users     User     @relation(fields: [userId], references: [id])
  movies    Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("favorites")
  @@unique([userId, movieId])
}
